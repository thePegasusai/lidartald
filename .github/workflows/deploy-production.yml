name: Production Deployment

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'infrastructure/**'
      - '.github/workflows/deploy-production.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string
      approve_changes:
        description: 'Require manual approval'
        required: true
        type: boolean
        default: true

env:
  ENVIRONMENT: production
  AWS_REGION: us-west-2
  CLUSTER_NAME: tald-unia-prod
  DOMAIN: tald-unia.com

permissions:
  id-token: write
  contents: read
  deployments: write
  packages: read
  environments: write

jobs:
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
          submodules: true

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_artifacts
          path: backend-dist

      - name: Download frontend artifacts  
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: web-dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/tald-unia-backend:${{ github.sha }} -f backend/Dockerfile .
          docker build -t $ECR_REGISTRY/tald-unia-frontend:${{ github.sha }} -f frontend/Dockerfile .
          docker push $ECR_REGISTRY/tald-unia-backend:${{ github.sha }}
          docker push $ECR_REGISTRY/tald-unia-frontend:${{ github.sha }}

  setup_infrastructure:
    name: Setup Infrastructure
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Initialize Terraform
        working-directory: infrastructure/terraform/environments/production
        run: |
          terraform init -backend=true \
            -backend-config="bucket=tald-unia-tfstate-prod" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Validate Terraform configurations
        working-directory: infrastructure/terraform/environments/production
        run: terraform validate

      - name: Plan infrastructure changes
        id: plan
        working-directory: infrastructure/terraform/environments/production
        run: |
          terraform plan -detailed-exitcode -out=tfplan \
            -var="environment=production" \
            -var="domain=${{ env.DOMAIN }}" \
            -var="cluster_name=${{ env.CLUSTER_NAME }}"

      - name: Wait for approval
        if: steps.plan.outputs.exitcode == 2 && inputs.approve_changes
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: required-approvers
          minimum-approvals: 2
          timeout: 3600

      - name: Apply infrastructure changes
        if: steps.plan.outputs.exitcode == 2
        working-directory: infrastructure/terraform/environments/production
        run: terraform apply -auto-approve tfplan

  deploy_applications:
    name: Deploy Applications
    needs: [setup_infrastructure]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production

    steps:
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 3.12.0

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} \
            --name ${{ env.CLUSTER_NAME }} --alias production

      - name: Deploy monitoring stack
        run: |
          helm upgrade --install monitoring ./infrastructure/helm/monitoring \
            --namespace monitoring --create-namespace \
            -f ./infrastructure/helm/monitoring/values-production.yaml \
            --set grafana.adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }}

      - name: Deploy application stack
        run: |
          helm upgrade --install tald-unia ./infrastructure/helm/tald-unia \
            --namespace production --create-namespace \
            -f ./infrastructure/helm/tald-unia/values-production.yaml \
            --set image.backend.tag=${{ github.sha }} \
            --set image.frontend.tag=${{ github.sha }} \
            --wait --timeout 10m

  validate_deployment:
    name: Validate Deployment
    needs: [deploy_applications]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Check endpoint health
        run: |
          for i in {1..30}; do
            if curl -f https://api.${{ env.DOMAIN }}/health; then
              exit 0
            fi
            sleep 10
          done
          exit 1

      - name: Verify metrics
        run: |
          curl -f https://metrics.${{ env.DOMAIN }}/api/v1/query \
            -d 'query=up{job="tald-unia"}' | grep -q '1'

      - name: Run smoke tests
        run: |
          npm run test:e2e:smoke
          
      - name: Notify deployment status
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: 'deployments'
          slack-message: |
            Deployment to production ${{ job.status }}
            Environment: ${{ env.ENVIRONMENT }}
            Version: ${{ github.sha }}
            Workflow: ${{ github.workflow }}