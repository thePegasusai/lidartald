#version 450
#extension GL_ARB_separate_shader_objects : enable

// Version comments for dependencies:
// Vulkan SDK 1.3.0
// SPIR-V 1.6

// Constants for lighting calculations
const int MAX_POINT_LIGHTS = 4;
const float AMBIENT_LIGHT_INTENSITY = 0.2;
const float MAX_MATERIAL_ROUGHNESS = 1.0;
const float MIN_MATERIAL_ROUGHNESS = 0.01;
const float PI = 3.14159265359;

// Input from vertex shader
layout(location = 0) in vec4 inColor;
layout(location = 1) in vec3 inNormal;
layout(location = 2) in vec3 inViewPos;

// Uniform buffer for material properties
layout(binding = 1) uniform MaterialUBO {
    vec4 baseColor;
    float roughness;
    float metallic;
    float ambientOcclusion;
    float alpha;
} material;

// Uniform buffer for lighting
layout(binding = 2) uniform LightingUBO {
    vec4 lightPositions[MAX_POINT_LIGHTS];
    vec4 lightColors[MAX_POINT_LIGHTS];
    int numActiveLights;
    float exposure;
} lighting;

// Output attachments
layout(location = 0) out vec4 outColor;
layout(location = 1) out vec4 outNormal;

// PBR functions
float DistributionGGX(vec3 N, vec3 H, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / max(denom, 0.001);
}

float GeometrySchlickGGX(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

// Main lighting calculation function
vec3 calculatePBRLighting(vec3 worldPos, vec3 N, vec3 V, vec3 albedo, float metallic, float roughness) {
    // Calculate reflectance at normal incidence
    vec3 F0 = mix(vec3(0.04), albedo, metallic);
    
    // Initialize lighting accumulator
    vec3 Lo = vec3(0.0);

    for(int i = 0; i < lighting.numActiveLights; i++) {
        vec3 L = normalize(lighting.lightPositions[i].xyz - worldPos);
        vec3 H = normalize(V + L);
        float distance = length(lighting.lightPositions[i].xyz - worldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = lighting.lightColors[i].rgb * attenuation;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(N, H, roughness);
        float G = GeometrySmith(N, V, L, roughness);
        vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

        vec3 numerator = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
        vec3 specular = numerator / denominator;

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;

        float NdotL = max(dot(N, L), 0.0);
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;
    }

    // Ambient lighting
    vec3 ambient = AMBIENT_LIGHT_INTENSITY * albedo * material.ambientOcclusion;
    
    return ambient + Lo;
}

void main() {
    // Normalize inputs
    vec3 N = normalize(inNormal);
    vec3 V = normalize(-inViewPos);
    
    // Get base color from vertex color and material
    vec3 albedo = inColor.rgb * material.baseColor.rgb;
    
    // Clamp material properties
    float roughness = clamp(material.roughness, MIN_MATERIAL_ROUGHNESS, MAX_MATERIAL_ROUGHNESS);
    float metallic = clamp(material.metallic, 0.0, 1.0);
    
    // Calculate lighting
    vec3 color = calculatePBRLighting(inViewPos, N, V, albedo, metallic, roughness);
    
    // Apply exposure tone mapping
    color = vec3(1.0) - exp(-color * lighting.exposure);
    
    // Output final color with alpha
    outColor = vec4(color, material.alpha * inColor.a);
    
    // Output normal for post-processing
    outNormal = vec4(N * 0.5 + 0.5, 1.0);
}